%% ------------------------------------------------------------------------
% This script shows how to recreate the analysis test examples dataset 
% inlcuded with the main Madym C++ toolkit (described here:
% https://gitlab.com/manchester_qbi/manchester_qbi_public/madym_cxx/-/wikis/example_scripts)
% using the Matlab wrappers.
%
% It assumes you have already set your LOCAL_MADYM_ROOT, and that you have
% the examples dataset downloaded and copied to a location where you have 
% write access.
%
% We show:
% 1) How to run the examples using the config files in the dataset
% 2) How to override some of the config options
% 3) How to run the examples without the config files, setting all options
% via the Matlab wrapper
%% ------------------------------------------------------------------------
%Set path to the dataset - set this to the examples folder in which the
%test_dataset and config files are stored. 
%Alternatively leave data_dir empty and cd
%into your examples folder
data_dir = '';

%*************************************************************************
% NOTE: because the wrappers pass inputs to the Madym C++ tools via comand
% line strings, any paths containing spaces MUST be quote enclosed. To help
% with this we have included the convencience funtion, quote_path. Simply
% call this before passing any path to a Madym option. The examples below 
% use this, in conjunction with Matlab's inbuilt fullfile function to
% ensure paths are separated correctly for your operating system. We
% recommend you follow the same approach in your own code
%*************************************************************************

%% ------------------------------------------------------------------------
%% 1) How to run the examples using the config files in the dataset

%% 1.1 Fit T1
run_madym_T1(...
    'config', quote_path(fullfile(data_dir, 'madym_T1_config.txt')),...
    'working_directory', quote_path(fullfile(data_dir, 'test_dataset')));

%% 1.2 Detect AIF
run_madym_AIF(...
    'config', quote_path(fullfile(data_dir, 'madym_AIF_config.txt')),...
    'working_directory', quote_path(fullfile(data_dir, 'test_dataset')));

%% 1.3 Fit ETM
run_madym_DCE(...
    'config', quote_path(fullfile(data_dir, 'madym_ETM_auto_config.txt')),...
    'working_directory', quote_path(fullfile(data_dir, 'test_dataset')));

%% ------------------------------------------------------------------------
%% 2) How to override some of the config options
% We now show how to run using a config, but overriding one of the options,
% for example, fitting the 2CXM instead of the extended-Tofts model. We can
% do this for as many of the options as we like

%% 2.1 fit 2CXM instead of ETM, also updating the output dir
run_madym_DCE(...
    'config', quote_path(fullfile(data_dir, 'madym_ETM_auto_config.txt')),...
    'working_directory', quote_path(fullfile(data_dir, 'test_dataset')),...
    'model', '2CXM',...
    'output_dir', 'madym_output/2CXM_auto');

%% 2.2 Fit the ETM, but fix Vp (the 3rd parameter) to 0, to fit a TM
run_madym_DCE(...
    'config', quote_path(fullfile(data_dir, 'madym_ETM_auto_config.txt')),...
    'working_directory', quote_path(fullfile(data_dir, 'test_dataset')),...
    'fixed_params', 3,...
    'fixed_values', 0,...
    'output_dir', 'madym_output/TM_auto',...
    'dummy_run', 0);

%% ------------------------------------------------------------------------
%% 3) How to run the examples without the config files
% In this example we show how to run the analysis that would be performed
% by calling the madym_ETM_map_config.txt config file, but instead sets all
% options via the Matlab wrapper
run_madym_DCE(...
    'working_directory', quote_path(fullfile(data_dir, 'test_dataset')),...
    'model', 'ETM',...
    'output_dir', 'madym_output/ETM_map',...
    'output_Ct_mod', 1,...
    'output_Ct_sig', 1,...
    'M0_ratio', 1,...
    'T1_name', 'madym_output/T1/T1.hdr',...
    'T1_method', 'VFA',...
    'aif_map', 'madym_output/AIF/slice_0-4_Auto_AIF.hdr',...
    'dynamic_basename', 'dynamic/dyn_',...
    'img_fmt_r', 'ANALYZE',...
    'img_fmt_w', 'ANALYZE',...
    'injection_image', 7,...
    'r1_const', 3.4,...
    'roi_name', 'roi/tumour.hdr',...
    'error_name', 'madym_output/T1/error_tracker.hdr',...
    'no_audit', 1,...
    'overwrite', 1);

%% 4) Creating XTR files
% If your images have note been created with XTR files, you need to make
% these for Madym to read in the necessary image metadata (eg flip-angle,
% TR, dynamic time etc). This can be done using the Madym tool
% madym_MakeXtr. The example below shows how to create the XTR files for
% the test_dataset using the Matlab wrapper to this tool. Note initially
% make use of the get_dyn_times helper function to get the dynamic times
% from the exitsing XTR files. Alternatively, we can leave the times input
% empty and specify the temp_res. Note temp_res is set in SECONDS while
% dyn_times is set in MINUTES.
% You can also read and write XTR files using the native Matlab functions 
% read_xtr_file and write_xtr_file
t = get_dyn_times(fullfile(data_dir, 'test_dataset', 'dynamic', 'dyn_'), 75); 
run_madym_MakeXtr(...
    'working_directory', quote_path(fullfile(data_dir, 'test_dataset')), ...
    'T1_vols', {'vfa/FA_1.hdr','vfa/FA_2.hdr','vfa/FA_3.hdr'}, ...
    'dynamic_basename', 'dynamic/dyn_', ...
    'sequence_format', '%01u', ...Format for converting dynamic series index to string, eg %01u
    'sequence_start', 1, ...Start index for dynamic series file names
    'sequence_step', 1, ...Step between indexes of filenames in dynamic series
    'n_dyns', 75, ...
    'make_t1', 1, ...
    'make_dyn', 1, ...  
    'temp_res', NaN, ... %either set this or specify dyn_times
    'TR', 4.0, ... 
    'FA', 20, ... 
    'VFAs', [2, 10, 20], ... 
    'dyn_times', t, ... 
    'dummy_run', 0);